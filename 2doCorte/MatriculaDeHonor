import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

class Estudiante implements Comparable<Estudiante> {
    String idEstud;
    String nombre;
    float promAcum;

    public Estudiante(String idEstud, String nombre, float promAcum) {
        this.idEstud = idEstud;
        this.nombre = nombre;
        this.promAcum = promAcum;
    }

    @Override
    public int compareTo(Estudiante otro) {
        return Float.compare(this.promAcum, otro.promAcum);
    }
}


public class Main {
    public static void main(String[] args) {
        Estudiante[] estudiantes = new Estudiante[100];
        Random random = new Random();

        // Llenar el arreglo con datos aleatorios
        for (int i = 0; i < 100; i++) {
            estudiantes[i] = new Estudiante("ID" + i, "Estudiante" + i, random.nextFloat() * 5);
        }

        // Ordenar el arreglo por promAcum
        Arrays.sort(estudiantes);

        // Entrada del usuario
        Scanner scanner = new Scanner(System.in);
        System.out.print("Ingrese la nota a buscar: ");
        float objetivo = scanner.nextFloat();

        // Búsqueda binaria iterativa
        int resultadoIterativo = busquedaBinariaIterativa(estudiantes, objetivo);
        if (resultadoIterativo != -1) {
            System.out.println("Encontrado con búsqueda iterativa en la posición: " + resultadoIterativo);
        } else {
            System.out.println("La nota no está en el arreglo (iterativo).");
        }

        // Búsqueda binaria recursiva
        int resultadoRecursivo = busquedaBinariaRecursiva(estudiantes, objetivo, 0, estudiantes.length - 1);
        if (resultadoRecursivo != -1) {
            System.out.println("Encontrado con búsqueda recursiva en la posición: " + resultadoRecursivo);
        } else {
            System.out.println("La nota no está en el arreglo (recursivo).");
        }

        // Contar estudiantes con promedio mayor a la nota dada
        int count = contarEstudiantesMayorQue(estudiantes, objetivo);
        System.out.println("Número de estudiantes con promedio mayor que " + objetivo + ": " + count);

        scanner.close();
    }

    public static int busquedaBinariaIterativa(Estudiante[] arr, float objetivo) {
        int izquierda = 0;
        int derecha = arr.length - 1;

        while (izquierda <= derecha) {
            int medio = izquierda + (derecha - izquierda) / 2;
            if (arr[medio].promAcum == objetivo) {
                return medio;
            }
            if (arr[medio].promAcum < objetivo) {
                izquierda = medio + 1;
            } else {
                derecha = medio - 1;
            }
        }
        return -1;
    }

    public static int busquedaBinariaRecursiva(Estudiante[] arr, float objetivo, int izquierda, int derecha) {
        if (izquierda > derecha) {
            return -1;
        }
        int medio = izquierda + (derecha - izquierda) / 2;
        if (arr[medio].promAcum == objetivo) {
            return medio;
        }
        if (arr[medio].promAcum > objetivo) {
            return busquedaBinariaRecursiva(arr, objetivo, izquierda, medio - 1);
        }
        return busquedaBinariaRecursiva(arr, objetivo, medio + 1, derecha);
    }

    public static int contarEstudiantesMayorQue(Estudiante[] arr, float nota) {
        int count = 0;
        for (Estudiante e : arr) {
            if (e.promAcum > nota) {
                count++;
            }
        }
        return count;
    }
}
