compaartor v/s comparable:
En Java, tanto `Comparable` como `Comparator` se usan para definir el orden de los objetos, pero tienen diferencias clave en su implementaci칩n y uso.  

## 游댳 `Comparable` (Interfaz)
- Se usa cuando una clase necesita definir su **orden natural**.  
- La clase que se quiere ordenar **implementa** `Comparable<T>` y sobrescribe el m칠todo `compareTo(T o)`.  
- Se usa cuando el orden de los objetos es **intr칤nseco** a la clase (por ejemplo, ordenar empleados por su ID).  
- Solo se puede definir **un** criterio de comparaci칩n.

### Ejemplo de `Comparable`
```java
class Persona implements Comparable<Persona> {
    private String nombre;
    private int edad;

    public Persona(String nombre, int edad) {
        this.nombre = nombre;
        this.edad = edad;
    }

    @Override
    public int compareTo(Persona otra) {
        return Integer.compare(this.edad, otra.edad); // Ordenar por edad
    }

    @Override
    public String toString() {
        return nombre + " (" + edad + " a침os)";
    }
}

public class Main {
    public static void main(String[] args) {
        List<Persona> personas = new ArrayList<>();
        personas.add(new Persona("Ana", 30));
        personas.add(new Persona("Luis", 25));
        personas.add(new Persona("Pedro", 35));

        Collections.sort(personas); // Ordena usando compareTo()
        System.out.println(personas); // [Luis (25 a침os), Ana (30 a침os), Pedro (35 a침os)]
    }
}
```
游댳 **Ventaja**: Simple y directo si solo necesitas un criterio de ordenaci칩n.  
游댳 **Desventaja**: Si necesitas m칰ltiples criterios de ordenaci칩n, no es flexible.  

-----------------------------------------------------------------------------------------------------------------------------------------

## 游댳 `Comparator` (Interfaz)
- Se usa cuando **quieres definir m칰ltiples formas de ordenar** una clase sin modificar su c칩digo.  
- No se implementa en la clase que se quiere ordenar, sino que se **crea una clase separada** o se usa una **expresi칩n lambda**.  
- Se usa cuando el orden **no es natural** y puede variar seg칰n el contexto (por ejemplo, ordenar empleados por salario o por nombre).  

### Ejemplo de `Comparator`
```java
class Persona {
    private String nombre;
    private int edad;

    public Persona(String nombre, int edad) {
        this.nombre = nombre;
        this.edad = edad;
    }

    public String getNombre() { return nombre; }
    public int getEdad() { return edad; }

    @Override
    public String toString() {
        return nombre + " (" + edad + " a침os)";
    }
}

public class Main {
    public static void main(String[] args) {
        List<Persona> personas = new ArrayList<>();
        personas.add(new Persona("Ana", 30));
        personas.add(new Persona("Luis", 25));
        personas.add(new Persona("Pedro", 35));

        // Ordenar por nombre (usando Comparator como lambda)
        personas.sort(Comparator.comparing(Persona::getNombre));
        System.out.println(personas); // [Ana (30 a침os), Luis (25 a침os), Pedro (35 a침os)]

        // Ordenar por edad (descendente)
        personas.sort((p1, p2) -> Integer.compare(p2.getEdad(), p1.getEdad()));
        System.out.println(personas); // [Pedro (35 a침os), Ana (30 a침os), Luis (25 a침os)]
    }
}
```
游댳 **Ventaja**: Permite m칰ltiples criterios de ordenaci칩n sin modificar la clase original.  
游댳 **Desventaja**: Es m치s c칩digo si solo necesitas un criterio de ordenaci칩n.  

---

## Resumen  
|    Caracter칤stica    |              `Comparable`              |                     `Comparator`                     |
|----------------------|----------------------------------------|------------------------------------------------------|
| D칩nde se implementa  | Dentro de la propia clase              | En una clase separada o lambda                       |
| M칠todo a implementar | `compareTo(T o)`                       | `compare(T o1, T o2)`                                |
| Uso principal        | Definir orden **natural**              | Permitir m칰ltiples criterios de ordenaci칩n           |
| Ejemplo t칤pico       | Ordenar `Persona` por edad por defecto | Ordenar `Persona` por nombre o edad seg칰n necesidad  |
| Ventaja              | Simplicidad si solo hay un criterio     | Mayor flexibilidad para definir diferentes 칩rdenes  |

Si el objeto **tiene un 칰nico orden l칩gico**, usa `Comparable`.  
Si **necesitas m칰ltiples formas de ordenar**, usa `Comparator`.
