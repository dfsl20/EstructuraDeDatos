comparator v/s comparable con objetos

En Java, tanto `Comparable` como `Comparator` se utilizan para definir el orden de los objetos, pero tienen diferencias clave en cómo se implementan y cuándo se deben usar.

---

### **1. `Comparable<T>` (Orden natural de los objetos)**
- Se implementa en la propia clase del objeto.
- Define un único criterio de ordenación "natural".
- Se usa cuando la clase misma tiene un orden lógico y debe ser comparable con otras instancias de la misma clase.
- Implementa el método `compareTo(T o)`, que devuelve:
  - Un número negativo si el objeto actual es menor que el argumento.
  - Cero si son iguales.
  - Un número positivo si es mayor.

#### **Ejemplo de `Comparable`**
```java
class Persona implements Comparable<Persona> {
    String nombre;
    int edad;

    public Persona(String nombre, int edad) {
        this.nombre = nombre;
        this.edad = edad;
    }

    @Override
    public int compareTo(Persona otra) {
        return Integer.compare(this.edad, otra.edad); // Ordena por edad
    }

    @Override
    public String toString() {
        return nombre + " (" + edad + ")";
    }
}
```
**Uso en `Collections.sort()`**
```java
import java.util.*;

public class Main {
    public static void main(String[] args) {
        List<Persona> personas = new ArrayList<>();
        personas.add(new Persona("Juan", 30));
        personas.add(new Persona("Ana", 25));
        personas.add(new Persona("Luis", 35));

        Collections.sort(personas); // Ordena por edad

        System.out.println(personas);
    }
}
```

---

### **2. `Comparator<T>` (Orden personalizado y flexible)**
- Se usa cuando se quiere ordenar objetos de una clase sin modificar la clase en sí.
- Permite múltiples criterios de comparación.
- Se implementa en una clase externa o con expresiones lambda.
- Implementa el método `compare(T o1, T o2)`, que devuelve:
  - Un número negativo si `o1` es menor que `o2`.
  - Cero si son iguales.
  - Un número positivo si `o1` es mayor que `o2`.

#### **Ejemplo de `Comparator`**
```java
import java.util.*;

class ComparadorPorNombre implements Comparator<Persona> {
    @Override
    public int compare(Persona p1, Persona p2) {
        return p1.nombre.compareTo(p2.nombre); // Ordena por nombre alfabéticamente
    }
}
```

**Uso en `Collections.sort()`**
```java
public class Main {
    public static void main(String[] args) {
        List<Persona> personas = new ArrayList<>();
        personas.add(new Persona("Juan", 30));
        personas.add(new Persona("Ana", 25));
        personas.add(new Persona("Luis", 35));

        // Ordenar por nombre usando Comparator
        Collections.sort(personas, new ComparadorPorNombre());

        System.out.println(personas);
    }
}
```

**Uso con Expresión Lambda (`Comparator.comparing`)**
```java
Collections.sort(personas, Comparator.comparing(p -> p.nombre)); // Ordena por nombre
```

---

### **¿Cuándo usar `Comparable` y cuándo `Comparator`?**
| **Característica** | **Comparable** | **Comparator** |
|-------------------|--------------|--------------|
| ¿Dónde se define? | En la misma clase del objeto. | En una clase separada o con expresiones lambda. |
| ¿Cuántos criterios permite? | Solo uno (el "natural"). | Varios, ya que se pueden definir diferentes comparadores. |
| ¿Se puede modificar sin alterar la clase original? | No, requiere modificar la clase. | Sí, sin tocar la clase original. |
| ¿Se usa en estructuras de datos ordenadas? | Sí, como `TreeSet` y `TreeMap` por clave. | También, pero con un comparador explícito. |

**Regla general:**  
- Usa `Comparable` cuando haya un orden natural único e intuitivo.  
- Usa `Comparator` cuando necesites múltiples formas de ordenar sin modificar la clase original.
